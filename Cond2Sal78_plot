#' @export
if (!require(wql)) {install.packages("wql")}

# Temperature, conductivity and salinity data from Odyssey Logger
Odyssey_parse <- function (file) {
  logger_record_df = data.frame(matrix(ncol=7, nrow=0))
  colnames(logger_record_df) <- c("Date", "Time", "DateTime", "Mesocosm", "Temperature", "Conductivity", "Salinity")
  
  sheet_list <- c("L01", "L06", "L08", "L10")
  for (sheet in sheet_list) {
    src <- readxl::read_excel(file, sheet = sheet)
    temp_df <- data.frame(src[, 2:3], "", sheet, src[, 5], src[, 7:8]) # columns: "Date", "Time", "", sheet, "Temperature CALIBRATED VALUE", "Salinity CALIBRATED VALUE", "Salinity (ppt)"
    # colnames(temp_df) <- colnames(logger_record_df); logger_record_df <- rbind(logger_record_df, temp_df)
    logger_record_df <- data.frame(mapply(c, logger_record_df, temp_df))
  }
  logger_record_df <- logger_record_df[grepl("[0-9]", logger_record_df$Temperature), ] # remove empty rows
  
  logger_record_df[, c("Temperature", "Conductivity", "Salinity")] <- dplyr::mutate_all(logger_record_df[, c("Temperature", "Conductivity", "Salinity")], function(x) {as.numeric(as.character(x))})
  logger_record_df$Salinity <- wql::ec2pss(logger_record_df$Conductivity, logger_record_df$Temperature)
  
  print("Summary of Odyssey data"); print(summary(logger_record_df))
  
  logger_record_df$DateTime <- as.POSIXct(paste0(logger_record_df$Date, " ", logger_record_df$Time), format="%d/%m/%Y %H:%M:%S", tz=Sys.timezone())
  
  return(logger_record_df)
}

Odyssey_plot <- function(logger_record_df_long, add_variable_levels = NULL, add_variable_namedict = NULL) {
  VARIABLE_LEVELS <- c("Temperature", "Conductivity", "Salinity")
  if (!is.null(add_variable_levels)) {VARIABLE_LEVELS <- c(VARIABLE_LEVELS, add_variable_levels)}
  VARIABLE_NAMEDICT <- c("Temperature"="Temperature (°C)", "Conductivity"="Conductivity (mS/cm)", "Salinity"="Salinity (ppt)")
  if (!is.null(add_variable_namedict)) {VARIABLE_NAMEDICT <- c(VARIABLE_NAMEDICT, add_variable_namedict)}
  
  p <- ggplot2::ggplot(data = logger_record_df_long, ggplot2::aes(x=DateTime, y=value, color=Mesocosm)) + ggplot2::geom_point(size=0.5) + ggplot2::geom_line() + ggplot2::theme(axis.text.x = ggplot2::element_text(vjust=1, hjust=1, angle = 45)) + ggplot2::scale_x_datetime(date_breaks = "day", date_labels = "%Y%m%d %H:%M:%S", limits = c(min(logger_record_df_long$DateTime), max(logger_record_df_long$DateTime))) + ggplot2::facet_grid(factor(variable, levels=VARIABLE_LEVELS)~ ., labeller = ggplot2::as_labeller(VARIABLE_NAMEDICT), scales = "free_y")
  return(p)
} 
# =======================================================================================================================================

# Weather (Daily Extract of Meteorological Observations): https://www.hko.gov.hk/en/cis/dailyExtract.htm?y=2023&m=07
# Daily Mean Sea Temperature (°C) (a.m.) at North Point 2023: https://www.hko.gov.hk/en/cis/dailyElement.htm?ele=SEATEMP_NP_AM&y=2023
weather_parse <- function(weather_df) {
  weather_df <- dplyr::mutate_at(weather_df, c("...6", "...11"), function(x) {as.numeric(as.character(x))}) # "...6": Air Temperature Mean (deg. C); "...11": Total Rainfall (mm)
  
  weather_df$fullDate <- as.POSIXct(paste(weather_df$Year, weather_df$Month, weather_df$Day, sep = " "), format="%Y %m %d", tz=Sys.timezone())

  weather_df_extract <- data.frame("fullDate" = weather_df$fullDate, "HKO"="HKO", "Air_temperature_mean" = weather_df$...6, "Total_rainfall" = weather_df$...11)
  weather_df_extract <- weather_df_extract[!is.na(weather_df_extract$fullDate), ]
  weather_df_extract <- dplyr::mutate_at(weather_df_extract, c("Air_temperature_mean", "Total_rainfall"), function(x) {tidyr::replace_na(x, 0)})

  return(weather_df_extract)
}  
  
# Plot method 1: with facet_grid
weather_plot_1 <- function(weather_df_extract, logger_record_df_long) {
  weather_df_extract_long <- tidyr::pivot_longer(weather_df_extract, cols = c("Air_temperature_mean", "Total_rainfall"), names_to = "variable")
  
  colnames(weather_df_extract_long) <- colnames(logger_record_df_long)
  logger_record_df_long_withWeather <- rbind(logger_record_df_long, weather_df_extract_long)
  # logger_record_df_long_withWeather <- data.frame(mapply(c, logger_record_df_long, weather_df_extract_long)) # mapply will change DateTime object to weird number
  logger_record_df_long_withWeather["value"] <- lapply(logger_record_df_long_withWeather["value"], as.numeric)
  unique(logger_record_df_long_withWeather$variable)
  
  variable_namedict <- c("Air_temperature_mean"="Mean air temperature (°C)", "Total_rainfall"="Total rainfall (mm)", "Temperature"="Temperature (°C)", "Conductivity"="Conductivity (mS/cm)", "Salinity"="Salinity (ppt)")
  
  p_withWeather <- ggplot2::ggplot(data = logger_record_df_long_withWeather, ggplot2::aes(x=DateTime, y=value, color=Mesocosm)) + ggplot2::geom_point(size=0.5) + ggplot2::geom_line() + ggplot2::labs(title = "Mesocosm logger record") + ggplot2::theme(axis.text.x = ggplot2::element_text(vjust=1, hjust=1, angle = 45)) + ggplot2::scale_x_datetime(date_breaks = "day", date_labels = "%Y%m%d %H:%M:%S") + ggplot2::facet_grid(factor(variable, levels=c("Air_temperature_mean", "Total_rainfall", "Temperature", "Conductivity", "Salinity"))~., labeller = ggplot2::as_labeller(variable_namedict), scales = "free_y") + ggplot2::scale_color_discrete(breaks = c('L01', 'L06', "L08", "L10"))
  return(p_withWeather)
}
  
# Plot method 2: Plot new, patch together later
weather_plot_2 <- function(weather_df_extract, logger_record_df_long) {
  weather_colordidct <- c("temperature" = "coral", "rainfall" = "deepskyblue")
  # weather_df_extract <- weather_df_extract[weather_df_extract$fullDate %in% as.POSIXct(unique(logger_record_df$Date), format="%d/%m/%Y", tz=Sys.timezone()), ]
  
  p_weather_raw <- ggplot2::ggplot(data = weather_df_extract, ggplot2::aes(x=fullDate)) + 
    ggplot2::geom_bar(ggplot2::aes(y=Total_rainfall), fill = weather_colordidct["rainfall"], stat="identity") + 
    ggplot2::geom_line(ggplot2::aes(y=(Air_temperature_mean-20)*42), color = weather_colordidct["temperature"]) + 
    ggplot2::geom_point(ggplot2::aes(y=(Air_temperature_mean-20)*42), color = weather_colordidct["temperature"]) + 
    ggplot2::scale_y_continuous(name = "Total Rainfall (mm)", sec.axis = ggplot2::sec_axis(~./42+20, name="Air Temperature (°C)")) +
    ggplot2::theme(axis.text.x = ggplot2::element_blank(), axis.ticks.x = ggplot2::element_blank(), axis.title.x = ggplot2::element_blank(),
                   axis.line.y.left = ggplot2::element_line(color = weather_colordidct["rainfall"]), axis.ticks.y.left = ggplot2::element_line(color = weather_colordidct["rainfall"]), axis.text.y.left = ggplot2::element_text(color = weather_colordidct["rainfall"]), axis.title.y.left = ggplot2::element_text(color = weather_colordidct["rainfall"]), 
                   axis.line.y.right = ggplot2::element_line(color = weather_colordidct["temperature"]), axis.ticks.y.right = ggplot2::element_line(color = weather_colordidct["temperature"]), axis.text.y.right = ggplot2::element_text(color = weather_colordidct["temperature"]), axis.title.y.right = ggplot2::element_text(color = weather_colordidct["temperature"])) + 
    ggplot2::scale_x_datetime(date_breaks = "day", date_labels = "%Y%m%d %H:%M:%S", limits = c(min(logger_record_df_long$DateTime), max(logger_record_df_long$DateTime)))
  
  return(p_weather_raw)
}
# =======================================================================================================================================

# add past Tropical Cyclone Warning Signal and Rainstorm Warning Signal for reference
cyclone_parse_plot <- function(cyclone_df, p_weather_raw) {
  # Tropical Cyclone Warning Signal
  # Data from HKO (https://www.hko.gov.hk/en/wxinfo/climat/warndb/warndb1.shtml)
  cyclone_df$...5 <- as.Date(as.numeric(cyclone_df$...5), origin = "1899-12-30")  # Start Date
  cyclone_df$...7 <- as.Date(as.numeric(cyclone_df$...7), origin = "1899-12-30") # End Date
  cyclone_df$`Start Time` <- chron::times(as.numeric(cyclone_df$`Start Time`))
  cyclone_df$`End Time` <- chron::times(as.numeric(cyclone_df$`End Time`))
  
  cyclone_df$start_datetime <- as.POSIXct(paste0(cyclone_df$...5, " ", cyclone_df$`Start Time`), format="%Y-%m-%d %H:%M:%S", tz=Sys.timezone())
  cyclone_df$end_datetime <- as.POSIXct(paste0(cyclone_df$...7, " ", cyclone_df$`End Time`), format="%Y-%m-%d %H:%M:%S", tz=Sys.timezone())
  cyclone_df <- cyclone_df[!is.na(cyclone_df$start_datetime), ]
  cyclone_df$Signal <- substr(cyclone_df$Signal, 1, 1)
  
  cyclone_colordict <- c("1"="darkgreen", "3"="darkblue", "8"="red", "9"="pink", "10"="purple")
  
  # p2 <- p + ggnewscale::new_scale_fill() + ggplot2::geom_rect(data = cyclone_df, ggplot2::aes(xmin=start_datetime, xmax=end_datetime, ymin = -Inf, ymax = Inf, fill=Signal), inherit.aes=FALSE, alpha=0.5) + ggplot2::scale_fill_manual(values=cyclone_colordict[unique(cyclone_df$Signal)]) + ggplot2::labs(fill="Tropical Cyclone Warning Signal")

  p_weather_raw_2 <- p_weather_raw + ggnewscale::new_scale_fill() + ggplot2::geom_rect(data = cyclone_df, ggplot2::aes(xmin=start_datetime, xmax=end_datetime, ymin = layer_scales(p_weather_raw)$y$range$range[2]*0.9, ymax = layer_scales(p_weather_raw)$y$range$range[2]*0.98, fill=Signal), inherit.aes=FALSE, alpha=0.5) + ggplot2::scale_fill_manual(values=cyclone_colordict[unique(cyclone_df$Signal)]) + ggplot2::labs(fill="Tropical Cyclone Warning Signal")
  # Creates a new scale "slot" in facet plot for multiple fill plot
  # https://stackoverflow.com/questions/39185291/legends-for-multiple-fills-in-ggplot
  return(p_weather_raw_2)
}

rainstrorm_parse_plot <- function(rainstorm_df, p_weather_raw_2) {
  # Rainstorm Warning Signal
  # Data from HKO (https://www.hko.gov.hk/en/wxinfo/climat/warndb/warndb3.shtml)
  rainstorm_df$...3 <- as.Date(as.numeric(rainstorm_df$...3), origin = "1899-12-30") # Start Date
  rainstorm_df$...5 <- as.Date(as.numeric(rainstorm_df$...5), origin = "1899-12-30") # End Date
  rainstorm_df$`Start Time` <- chron::times(as.numeric(rainstorm_df$`Start Time`))
  rainstorm_df$`End Time` <- chron::times(as.numeric(rainstorm_df$`End Time`))
  
  rainstorm_df$start_datetime <- as.POSIXct(paste0(rainstorm_df$...3, " ", rainstorm_df$`Start Time`), format="%Y-%m-%d %H:%M:%S", tz=Sys.timezone())
  rainstorm_df$end_datetime <- as.POSIXct(paste0(rainstorm_df$...5, " ", rainstorm_df$`End Time`), format="%Y-%m-%d %H:%M:%S", tz=Sys.timezone())
  rainstorm_df <- rainstorm_df[!is.na(rainstorm_df$start_datetime), ]
  
  rainstorm_colordict <- c("Amber"="darkgoldenrod1", "Red"="darkred", "Black"="black")
  
  # p3 <- p2 + ggnewscale::new_scale_fill() + ggplot2::geom_rect(data = rainstorm_df, ggplot2::aes(xmin=start_datetime, xmax=end_datetime, ymin = -Inf, ymax = Inf, fill=Color), inherit.aes=FALSE, alpha=0.5) + ggplot2::scale_fill_manual(values=rainstorm_colordict[unique(rainstorm_df$Color)]) + ggplot2::labs(fill="Rainstorm Warning")
  p_weather_raw_3 <- p_weather_raw_2 + ggnewscale::new_scale_fill() + ggplot2::geom_rect(data = rainstorm_df, ggplot2::aes(xmin=start_datetime, xmax=end_datetime, ymin = layer_scales(p_weather_raw)$y$range$range[2]*0.82, ymax = layer_scales(p_weather_raw)$y$range$range[2]*0.9, fill=Color), inherit.aes=FALSE, alpha=0.5) + ggplot2::scale_fill_manual(values=rainstorm_colordict[unique(rainstorm_df$Color)]) + ggplot2::labs(fill="Rainstorm Warning")
  return(p_weather_raw_3)
}
# =======================================================================================================================================

# Function for putting the graphs together (Obsolete)
cowplot_plot_grid <- function(p1, p2) {
  gA <- ggplot2::ggplotGrob(p1)
  gB <- ggplot2::ggplotGrob(p2)
  gB$widths <- gA$widths
  g <- gridExtra::gtable_rbind(gB, gA, size="max")
  # gridExtra::grid.arrange(p1, p2, nrow=2)
  grid::grid.newpage()
  p_grid <- cowplot::plot_grid(g)
}  
  
  
  
if (sys.nframe() == 0) {
  setwd(file.path(paste0("C:/Users/", Sys.info()[["user"]], "/Desktop/DMB/CRF marineGEO mesocosm/Logger and weather")))
  file <- "mesocosm_temp_salinity_Odyssey_20230907.xlsx"
  
  logger_record_df <- Odyssey_parse(file)
  write.csv(logger_record_df, file = (paste0(sub("\\.xlsx$", "", file), "_parsed.csv")))
  
  logger_record_df_long <- tidyr::pivot_longer(logger_record_df[, 3:ncol(logger_record_df)], cols = c("Temperature", "Conductivity", "Salinity"), names_to = "variable")
  # Alternative: logger_record_df_melted <- reshape2::melt(logger_record_df[, 3:ncol(logger_record_df)], id.vars = c("DateTime", "Mesocosm"))
  p <- Odyssey_plot(logger_record_df_long)
  
  weather_df <- readxl::read_excel(file, sheet = "Daily Extract", trim_ws = TRUE)
  weather_df_extract <- weather_parse(weather_df)
  
  # Plot method 1: with facet_grid
  p_withWeather <- weather_plot_1(weather_df_extract, logger_record_df_long)
  # Plot method 2: Plot new, patch together later
  p_weather_raw <- weather_plot_2(weather_df_extract, logger_record_df_long)
  
  cyclone_df <- readxl::read_excel(file, sheet = "Tropical Cyclone Warning Signal", trim_ws = TRUE)
  p_withWeather_2 <- cyclone_parse_plot(cyclone_df, p_withWeather)
  p_weather_raw_2 <- cyclone_parse_plot(cyclone_df, p_weather_raw)
  
  rainstorm_df <- readxl::read_excel(file, sheet = "Rainstorm Warning", trim_ws = TRUE)
  p_withWeather_3 <- rainstrorm_parse_plot(rainstorm_df, p_withWeather_2)
  p_weather_raw_3 <- rainstrorm_parse_plot(rainstorm_df, p_weather_raw_2)
  
  ggplot2::ggsave(paste0(sub("\\.xlsx$", "", file), "_plot_facet.pdf"), plot = p_withWeather_3, scale=1, width = 15, height = 10, dpi = 300)
  ggplot2::ggsave(paste0(sub("\\.xlsx$", "", file), "_plot_facet.svg"), plot = p_withWeather_3, scale=1, width = 15, height = 10, dpi = 300)
  
  both <- cowplot::plot_grid(p_weather_raw_3, p, ncol=1, rel_heights = c(1,3), align = "v", axis="tblr")
  ggplot2::ggsave(paste0(sub("\\.xlsx$", "", file), "_plot_grid.pdf"), plot = both, scale=1, width = 15, height = 10, dpi = 300)
  ggplot2::ggsave(paste0(sub("\\.xlsx$", "", file), "_plot_grid.svg"), plot = both, scale=1, width = 15, height = 10, dpi = 300)
  
}
